-- Create a Schema
CREATE DATABASE dannys_diner;

-- Set Default Schema
USE dannys_diner;

-- Create Sales Table
CREATE TABLE sales (
    customer_id VARCHAR(1),
    order_Date DATE,
    product_id INTEGER
);

-- Insert Data Into the Sales Table
INSERT INTO sales
(customer_id, order_Date, product_id)
VALUES
  ('A', '2021-01-01', '1'),
  ('A', '2021-01-01', '2'),
  ('A', '2021-01-07', '2'),
  ('A', '2021-01-10', '3'),
  ('A', '2021-01-11', '3'),
  ('A', '2021-01-11', '3'),
  ('B', '2021-01-01', '2'),
  ('B', '2021-01-02', '2'),
  ('B', '2021-01-04', '1'),
  ('B', '2021-01-11', '1'),
  ('B', '2021-01-16', '3'),
  ('B', '2021-02-01', '3'),
  ('C', '2021-01-01', '3'),
  ('C', '2021-01-01', '3'),
  ('C', '2021-01-07', '3');
  
  -- Create Menu Table
 CREATE TABLE menu (
    product_id INTEGER,
    product_name VARCHAR(5),
    price INTEGER
);
  
 -- Insert the Data into Menu Tables
  INSERT INTO menu
  (product_id, product_name, price)
  VALUES
  (1,'sushi',10),
  (2,'curry',15),
  (3,'ramen', 12);
  
  -- Create Table members
 CREATE TABLE members (
    customer_id VARCHAR(1),
    join_date DATE
);
  
  -- Insert Data into Members
  INSERT INTO members
  (customer_id,join_date)
  VALUES
  ('A','2021-01-07'),
  ('B','2021-01-09');
  
  -- Q.1 What is the total amount each customer spent at the restaurant?
SELECT 
    customer_id, SUM(price) AS 'Total Amount Spent'
FROM
    sales
        JOIN
    menu USING (product_id)
GROUP BY customer_id
ORDER BY 'Total Amount Spent';	

-- Q.2 How many days has each customer visited the restaurant?
SELECT 
    customer_id, COUNT(DISTINCT order_date) AS visit_count
FROM
    sales
GROUP BY customer_id
ORDER BY visit_count DESC;

-- Q.3 What was the first item from the menu purchased by each customer?
WITH ordered_sales AS (
  SELECT 
    customer_id, 
    order_date, 
    product_name,
    DENSE_RANK() OVER (
      PARTITION BY customer_id 
      ORDER BY order_date) AS First_Order
  FROM sales
  INNER JOIN menu
    USING (product_id)
)
SELECT 
  customer_id, 
  GROUP_CONCAT(DISTINCT product_name ORDER BY order_date SEPARATOR ', ') AS products
FROM ordered_sales
WHERE First_Order = 1
GROUP BY customer_id;

-- Q.4  What is the most purchased item on the menu and how many times was it purchased by all customers?
SELECT 
    product_name, COUNT(product_name) AS TotalOrder
FROM
    sales s
        JOIN
    menu m USING (product_id)
GROUP BY product_name
ORDER BY TotalOrder DESC
LIMIT 1;

-- Q.5  Which item was the most popular for each customer?
WITH customer_product_counts AS(
SELECT
    customer_id,
    product_name,
    COUNT(product_name) AS order_count
FROM sales
JOIN menu
USING (product_id)
GROUP BY customer_id, product_name
),
ranked_products AS(
SELECT
   customer_id,
   product_name,
   order_count,
   RANK() OVER(PARTITION BY customer_id ORDER BY order_count DESC) AS RankOrder
FROM customer_product_counts
)
SELECT 
	customer_id,
    product_name,
    order_count AS MaxOrder
FROM ranked_products
WHERE RankOrder = 1;


-- Q.6 Which item was purchased first by the customer after they became a member?
WITH RegisterDate AS (
SELECT
	members.customer_id,
    sales.product_id,
ROW_NUMBER() OVER(PARTITION BY customer_id ORDER BY order_date) AS row_num
FROM members
JOIN sales
ON members.customer_id = sales.customer_id
AND sales.order_date > members.join_date
)
SELECT 
	customer_id,
    product_name
FROM RegisterDate
JOIN menu
USING (product_id)
WHERE row_num = 1
ORDER BY customer_id ASC;

-- Q.7 Which item was purchased just before the customer became a member?
WITH first_purchase_after_membership AS (
  SELECT
    members.customer_id, 
    sales.product_id,
    ROW_NUMBER() OVER (
      PARTITION BY members.customer_id
      ORDER BY sales.order_date) AS row_num
  FROM dannys_diner.members
  INNER JOIN dannys_diner.sales
    ON members.customer_id = sales.customer_id
    AND sales.order_date > members.join_date
)
-- Select the first product purchased after becoming a member
SELECT 
  customer_id, 
  menu.product_name 
FROM first_purchase_after_membership
INNER JOIN dannys_diner.menu
  USING (product_id)
WHERE row_num = 1
ORDER BY customer_id ASC;

-- Q.8 What is the total items and amount spent for each member before they became a member?
SELECT
    members.customer_id,
    COUNT(sales.product_id) AS total_items,
    SUM(menu.price) AS total_amount_spent
FROM members
JOIN sales
    ON members.customer_id = sales.customer_id
    AND sales.order_date < members.join_date
JOIN menu
    ON sales.product_id = menu.product_id
GROUP BY members.customer_id
ORDER BY members.customer_id ASC;

-- Q.9 If each $1 spent equates to 10 points and sushi has a 2x points multiplier — how many points would each customer have?
WITH points_cte AS (
  SELECT 
    menu.product_id, 
    CASE
      WHEN product_id = 1 THEN price * 20
      ELSE price * 10 END AS points
  FROM dannys_diner.menu
)

SELECT 
  sales.customer_id, 
  SUM(points_cte.points) AS total_points
FROM dannys_diner.sales
INNER JOIN points_cte
  ON sales.product_id = points_cte.product_id
GROUP BY sales.customer_id
ORDER BY sales.customer_id;

-- Q.10 In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi — how many points do customer A and B have at the end of January?
WITH dates_cte AS (
  SELECT 
    customer_id, 
    join_date, 
    DATE_ADD(join_date, INTERVAL 6 DAY) AS valid_date, 
    LAST_DAY('2024-01-31') AS last_date
  FROM dannys_diner.members
)
SELECT 
  sales.customer_id, 
  SUM(CASE
    WHEN sales.order_date BETWEEN dates_cte.join_date AND dates_cte.valid_date THEN 2 * 10 * menu.price
    WHEN menu.product_name = 'sushi' THEN 2 * 10 * menu.price
    ELSE 10 * menu.price 
  END) AS points
FROM dannys_diner.sales
INNER JOIN dates_cte 
  ON sales.customer_id = dates_cte.customer_id
  AND sales.order_date <= dates_cte.last_date
INNER JOIN dannys_diner.menu
  ON sales.product_id = menu.product_id
WHERE sales.customer_id IN ('A', 'B')
GROUP BY sales.customer_id
ORDER BY sales.customer_id ASC;

-- Bonus Questions 
-- Danny also requires further information about the ranking of 
-- customer products, but he purposely does not need the ranking for non-member purchases so he expects null ranking values for the records when customers are not yet part of the loyalty program.
WITH sales_with_membership AS (
  SELECT
    sales.customer_id,
    sales.order_date,
    menu.product_name,
    menu.price,
    members.join_date
  FROM dannys_diner.sales
  LEFT JOIN dannys_diner.members
    ON sales.customer_id = members.customer_id
  LEFT JOIN dannys_diner.menu
    ON sales.product_id = menu.product_id
)
SELECT
  customer_id,
  product_name,
  order_date,
  price,
  join_date,
  CASE
    WHEN order_date >= join_date THEN
      DENSE_RANK() OVER (PARTITION BY customer_id ORDER BY order_date)
    ELSE NULL
  END AS product_rank
FROM sales_with_membership
ORDER BY customer_id, order_date;

-- Bonus Q.2 
-- Danny also requires further information about the ranking of customer products, but he purposely does not need the ranking for non-member purchases so he expects null ranking values for 
-- the records when customers are not yet part of the loyalty program.
WITH customers_data AS (
  SELECT 
    sales.customer_id, 
    sales.order_date,  
    menu.product_name, 
    menu.price,
    CASE
      WHEN members.join_date IS NULL OR members.join_date > sales.order_date THEN 'N'
      ELSE 'Y'
    END AS member_status
  FROM dannys_diner.sales
  LEFT JOIN dannys_diner.members
    ON sales.customer_id = members.customer_id
  INNER JOIN dannys_diner.menu
    ON sales.product_id = menu.product_id
)
SELECT 
  customer_id,
  order_date,
  product_name,
  price,
  member_status,
  CASE
    WHEN member_status = 'N' THEN NULL
    ELSE RANK() OVER (
      PARTITION BY customer_id, member_status
      ORDER BY order_date
    )
  END AS ranking
FROM customers_data;
